var t, i;
(t = this),
  (i = function(t, i) {
    'use strict';
    function n(i, t) {
      var e,
        n = Object.keys(i);
      return (
        Object.getOwnPropertySymbols &&
          ((e = Object.getOwnPropertySymbols(i)),
          t &&
            (e = e.filter(function(t) {
              return Object.getOwnPropertyDescriptor(i, t).enumerable;
            })),
          n.push.apply(n, e)),
        n
      );
    }
    function h(i) {
      for (var t = 1; t < arguments.length; t++) {
        var e = null != arguments[t] ? arguments[t] : {};
        t % 2
          ? n(Object(e), !0).forEach(function(t) {
              c(i, t, e[t]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(i, Object.getOwnPropertyDescriptors(e))
          : n(Object(e)).forEach(function(t) {
              Object.defineProperty(i, t, Object.getOwnPropertyDescriptor(e, t));
            });
      }
      return i;
    }
    function c(t, i, e) {
      return (
        i in t ? Object.defineProperty(t, i, { value: e, enumerable: !0, configurable: !0, writable: !0 }) : (t[i] = e),
        t
      );
    }
    function l(t) {
      return (
        (function(t) {
          if (Array.isArray(t)) return o(t);
        })(t) ||
        (function(t) {
          if (('undefined' != typeof Symbol && null != t[Symbol.iterator]) || null != t['@@iterator'])
            return Array.from(t);
        })(t) ||
        (function(t, i) {
          if (t) {
            if ('string' == typeof t) return o(t, i);
            var e = Object.prototype.toString.call(t).slice(8, -1);
            return 'Map' === (e = 'Object' === e && t.constructor ? t.constructor.name : e) || 'Set' === e
              ? Array.from(t)
              : 'Arguments' === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)
              ? o(t, i)
              : void 0;
          }
        })(t) ||
        (function() {
          throw new TypeError(
            'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
          );
        })()
      );
    }
    function o(t, i) {
      (null == i || i > t.length) && (i = t.length);
      for (var e = 0, n = new Array(i); e < i; e++) n[e] = t[e];
      return n;
    }
    function e() {
      return Date.now();
    }
    function r(t, i) {
      (this.create = function() {
        return window.setInterval(t, i);
      }),
        (this.stop = function() {
          this.timer && (window.clearInterval(this.timer), (this.timer = null));
        }),
        (this.start = function() {
          this.timer || (this.timer = this.create());
        }),
        (this.restart = function(t) {
          (i = t || i), this.stop(), this.start();
        }),
        (this.timer = this.create());
    }
    function u(t, i) {
      i = t < 0 ? (t + i) % i : t % i;
      return i != i ? 0 : i;
    }
    function d(t, i) {
      var e = i.children || i.componentOptions.children || i.text;
      return t(i.componentOptions.Ctor, i.data, e);
    }
    i = i && Object.prototype.hasOwnProperty.call(i, 'default') ? i.default : i;
    var s =
      Object.assign ||
      function(t) {
        if (null == t) throw new TypeError('Cannot convert first argument to object');
        for (var i = Object(t), e = 1; e < arguments.length; e++)
          if (null != (n = arguments[e]))
            for (var n = Object(n), o = Object.keys(Object(n)), r = 0, s = o.length; r < s; r++) {
              var a = o[r],
                h = Object.getOwnPropertyDescriptor(n, a);
              void 0 !== h && h.enumerable && (i[a] = n[a]);
            }
        return i;
      };
    var a =
      Math.sign ||
      function(t) {
        return t < 0 ? -1 : 0 < t ? 1 : 0;
      };
    function p(t, i) {
      return t.$scopedSlots.default
        ? t.$scopedSlots.default(1 < arguments.length && void 0 !== i ? i : {}) || []
        : t.$slots.default || [];
    }
    var f = new i(),
      g = {
        name: 'Hooper',
        provide: function() {
          return { $hooper: this };
        },
        props: {
          itemsToShow: { default: 1, type: Number },
          itemsToSlide: { default: 1, type: Number },
          initialSlide: { default: 0, type: Number },
          infiniteScroll: { default: !1, type: Boolean },
          centerMode: { default: !1, type: Boolean },
          vertical: { default: !1, type: Boolean },
          rtl: { default: null, type: Boolean },
          autoPlay: { default: !1, type: Boolean },
          playSpeed: { default: 2e3, type: Number },
          mouseDrag: { default: !0, type: Boolean },
          touchDrag: { default: !0, type: Boolean },
          wheelControl: { default: !0, type: Boolean },
          keysControl: { default: !0, type: Boolean },
          shortDrag: { default: !0, type: Boolean },
          transition: { default: 300, type: Number },
          hoverPause: { default: !0, type: Boolean },
          trimWhiteSpace: { default: !1, type: Boolean },
          settings: {
            default: function() {
              return {};
            },
            type: Object
          },
          group: { type: String, default: null }
        },
        data: function() {
          return {
            isDragging: !1,
            isSliding: !1,
            isTouch: !1,
            isHover: !1,
            isFocus: !1,
            initialized: !1,
            slideWidth: 0,
            slideHeight: 0,
            slidesCount: 0,
            trimStart: 0,
            trimEnd: 1,
            currentSlide: null,
            timer: null,
            defaults: {},
            breakpoints: {},
            delta: { x: 0, y: 0 },
            config: {}
          };
        },
        computed: {
          slideBounds: function() {
            var t = this.config,
              i = this.currentSlide,
              e = t.itemsToShow;
            return {
              lower: t.centerMode ? Math.ceil(i - e / 2) : i,
              upper: t.centerMode ? Math.floor(i + e / 2) : Math.floor(i + e - 1)
            };
          },
          trackTransform: function() {
            var t = this.config,
              i = t.infiniteScroll,
              e = t.vertical,
              n = t.rtl,
              o = t.centerMode,
              r = e ? this.slideHeight : this.slideWidth,
              t = e ? this.containerHeight : this.containerWidth,
              r =
                (e ? this.delta.y : this.delta.x) +
                (n ? -1 : 1) * ((o ? (t - r) / 2 : 0) - (i ? r * this.slidesCount : 0) - this.currentSlide * r);
            return e ? 'transform: translate(0, '.concat(r, 'px);') : 'transform: translate('.concat(r, 'px, 0);');
          },
          trackTransition: function() {
            return this.initialized && this.isSliding ? 'transition: '.concat(this.config.transition, 'ms') : '';
          }
        },
        watch: {
          group: function(t, i) {
            t !== i && (f.$off('slideGroup:'.concat(i), this._groupSlideHandler), this.addGroupListeners());
          }
        },
        methods: {
          slideTo: function(t) {
            var i,
              e,
              n,
              o,
              r,
              s,
              a = this,
              h = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
            this.isSliding ||
              t === this.currentSlide ||
              (this.$emit('beforeSlide', { currentSlide: this.currentSlide, slideTo: void 0 }),
              (s = (r = this.config).infiniteScroll),
              (i = r.transition),
              (e = this.currentSlide),
              (n = s
                ? t
                : ((o = t), (r = this.trimStart), (s = this.slidesCount - this.trimEnd), Math.max(Math.min(o, s), r))),
              this.group && h && f.$emit('slideGroup:'.concat(this.group), t),
              (this.currentSlide = n),
              (this.isSliding = !0),
              window.setTimeout(function() {
                (a.isSliding = !1), (a.currentSlide = u(n, a.slidesCount));
              }, i),
              this.$emit('slide', { currentSlide: this.currentSlide, slideFrom: e }));
          },
          slideNext: function() {
            this.slideTo(this.currentSlide + this.config.itemsToSlide);
          },
          slidePrev: function() {
            this.slideTo(this.currentSlide - this.config.itemsToSlide);
          },
          initEvents: function() {
            null === this.defaults.rtl && (this.defaults.rtl = 'rtl' === getComputedStyle(this.$el).direction),
              this.config.autoPlay && this.initAutoPlay(),
              this.config.mouseDrag && this.$refs.list.addEventListener('mousedown', this.onDragStart),
              this.config.touchDrag &&
                this.$refs.list.addEventListener('touchstart', this.onDragStart, { passive: !0 }),
              this.config.keysControl && this.$el.addEventListener('keydown', this.onKeypress),
              this.config.wheelControl &&
                ((this.lastScrollTime = e()), this.$el.addEventListener('wheel', this.onWheel, { passive: !1 })),
              window.addEventListener('resize', this.update);
          },
          initAutoPlay: function() {
            var t = this;
            this.timer = new r(function() {
              t.isSliding ||
                t.isDragging ||
                (t.isHover && t.config.hoverPause) ||
                t.isFocus ||
                (t.currentSlide !== t.slidesCount - 1 || t.config.infiniteScroll ? t.slideNext() : t.slideTo(0));
            }, this.config.playSpeed);
          },
          initDefaults: function() {
            (this.breakpoints = this.settings.breakpoints),
              (this.defaults = s({}, this.$props, this.settings)),
              (this.config = s({}, this.defaults));
          },
          update: function() {
            this.breakpoints && this.updateConfig(),
              this.updateWidth(),
              this.updateTrim(),
              this.$emit('updated', {
                containerWidth: this.containerWidth,
                containerHeight: this.containerHeight,
                slideWidth: this.slideWidth,
                slideHeight: this.slideHeight,
                settings: this.config
              });
          },
          updateTrim: function() {
            var t = this.config,
              i = t.trimWhiteSpace,
              e = t.itemsToShow,
              n = t.centerMode,
              t = t.infiniteScroll;
            if (!i || t) return (this.trimStart = 0), void (this.trimEnd = 1);
            (this.trimStart = n ? Math.floor((e - 1) / 2) : 0), (this.trimEnd = n ? Math.ceil(e / 2) : e);
          },
          updateWidth: function() {
            var t = this.$el.getBoundingClientRect();
            (this.containerWidth = t.width),
              (this.containerHeight = t.height),
              this.config.vertical
                ? (this.slideHeight = this.containerHeight / this.config.itemsToShow)
                : (this.slideWidth = this.containerWidth / this.config.itemsToShow);
          },
          updateConfig: function() {
            var i,
              e = this;
            Object.keys(this.breakpoints)
              .sort(function(t, i) {
                return i - t;
              })
              .some(function(t) {
                if ((i = window.matchMedia('(min-width: '.concat(t, 'px)')).matches))
                  return (e.config = s({}, e.config, e.defaults, e.breakpoints[t])), !0;
              }),
              i || (this.config = s(this.config, this.defaults));
          },
          restartTimer: function() {
            this.timer && this.timer.restart();
          },
          restart: function() {
            var t = this;
            this.$nextTick(function() {
              t.update();
            });
          },
          onDragStart: function(t) {
            (this.isTouch = 'touchstart' === t.type),
              (!this.isTouch && 0 !== t.button) ||
                ((this.startPosition = { x: 0, y: 0 }),
                (this.endPosition = { x: 0, y: 0 }),
                (this.isDragging = !0),
                (this.startPosition.x = (this.isTouch ? t.touches[0] : t).clientX),
                (this.startPosition.y = (this.isTouch ? t.touches[0] : t).clientY),
                document.addEventListener(this.isTouch ? 'touchmove' : 'mousemove', this.onDrag),
                document.addEventListener(this.isTouch ? 'touchend' : 'mouseup', this.onDragEnd));
          },
          isInvalidDirection: function(t, i) {
            return this.config.vertical
              ? !!this.config.vertical && Math.abs(i) <= Math.abs(t)
              : Math.abs(t) <= Math.abs(i);
          },
          onDrag: function(t) {
            var i, e;
            this.isSliding ||
              ((this.endPosition.x = (this.isTouch ? t.touches[0] : t).clientX),
              (this.endPosition.y = (this.isTouch ? t.touches[0] : t).clientY),
              (i = this.endPosition.x - this.startPosition.x),
              (e = this.endPosition.y - this.startPosition.y),
              this.isInvalidDirection(i, e) ||
                ((this.delta.y = e), (this.delta.x = i), this.isTouch || t.preventDefault()));
          },
          onDragEnd: function() {
            var t,
              i = this.config.shortDrag ? 0.5 : 0.15;
            (this.isDragging = !1),
              this.config.vertical &&
                ((t = Math.round(Math.abs(this.delta.y / this.slideHeight) + i)),
                this.slideTo(this.currentSlide - a(this.delta.y) * t)),
              this.config.vertical ||
                ((t = (this.config.rtl ? -1 : 1) * a(this.delta.x)),
                (i = Math.round(Math.abs(this.delta.x / this.slideWidth) + i)),
                this.slideTo(this.currentSlide - t * i)),
              (this.delta.x = 0),
              (this.delta.y = 0),
              document.removeEventListener(this.isTouch ? 'touchmove' : 'mousemove', this.onDrag),
              document.removeEventListener(this.isTouch ? 'touchend' : 'mouseup', this.onDragEnd),
              this.restartTimer();
          },
          onTransitionend: function() {
            (this.isSliding = !1), this.$emit('afterSlide', { currentSlide: this.currentSlide });
          },
          onKeypress: function(t) {
            var i = t.key;
            return (
              i.startsWith('Arrow') && t.preventDefault(),
              this.config.vertical
                ? ('ArrowUp' === i && this.slidePrev(), void ('ArrowDown' === i && this.slideNext()))
                : this.config.rtl
                ? ('ArrowRight' === i && this.slidePrev(), void ('ArrowLeft' === i && this.slideNext()))
                : ('ArrowRight' === i && this.slideNext(), void ('ArrowLeft' === i && this.slidePrev()))
            );
          },
          onWheel: function(t) {
            var i = this.config.vertical ? t.wheelDeltaY || -t.deltaY : t.wheelDeltaX || -t.deltaX,
              i = i;
            i && t.preventDefault(),
              e() - this.lastScrollTime < 200 ||
                ((this.lastScrollTime = e()), -1 === (i = a(i)) && this.slideNext(), 1 === i && this.slidePrev());
          },
          addGroupListeners: function() {
            var i = this;
            this.group &&
              ((this._groupSlideHandler = function(t) {
                i.slideTo(t, !1);
              }),
              f.$on('slideGroup:'.concat(this.group), this._groupSlideHandler));
          }
        },
        created: function() {
          this.initDefaults();
        },
        mounted: function() {
          var t = this;
          this.initEvents(),
            this.addGroupListeners(),
            this.$nextTick(function() {
              t.update(),
                t.slideTo(t.config.initialSlide || 0),
                setTimeout(function() {
                  t.$emit('loaded'), (t.initialized = !0);
                }, t.transition);
            });
        },
        beforeDestroy: function() {
          window.removeEventListener('resize', this.update),
            this.group && f.$off('slideGroup:'.concat(this.group), this._groupSlideHandler),
            this.timer && this.timer.stop();
        },
        render: function(t) {
          var i = this,
            e = function(t) {
              var i = function(t) {
                  for (var i = p(this), e = i.length, n = 0, o = [], r = 0; r < e; r++) {
                    var s = i[r],
                      a = s.componentOptions && s.componentOptions.Ctor;
                    a &&
                      'HooperSlide' === a.options.name &&
                      ((s.componentOptions.propsData.index = n),
                      (s.data.key = n),
                      (s.key = n),
                      (s.data.props = h(h({}, s.data.props || {}), {}, { isClone: !1, index: n++ })),
                      o.push(s));
                  }
                  (this.slidesCount = o.length),
                    this.config.infiniteScroll &&
                      (o = (function(t, i) {
                        for (var e = [], n = [], o = i.length, r = 0; r < o; r++) {
                          var s = i[r],
                            a = d(t, s),
                            h = r - o;
                          (a.data.key = 'before_'.concat(r)),
                            (a.key = a.data.key),
                            (a.componentOptions.propsData.index = h),
                            (a.data.props = { index: h, isClone: !0 }),
                            e.push(a);
                          s = d(t, s);
                          (h = r + o),
                            (s.data.key = 'after_'.concat(h)),
                            (s.componentOptions.propsData.index = h),
                            (s.key = s.data.key),
                            (s.data.props = { index: h, isClone: !0 }),
                            n.push(s);
                        }
                        return [].concat(e, l(i), n);
                      })(t, o));
                  return t(
                    'ul',
                    {
                      class: { 'hooper-track': !0, 'is-dragging': this.isDragging },
                      style: this.trackTransform + this.trackTransition,
                      ref: 'track',
                      on: { transitionend: this.onTransitionend }
                    },
                    o
                  );
                }.call(this, t),
                e = this.$slots['hooper-addons'] || [],
                n = t(
                  'div',
                  {
                    class: 'hooper-liveregion hooper-sr-only',
                    attrs: { 'aria-live': 'polite', 'aria-atomic': 'true' }
                  },
                  'Item '.concat(this.currentSlide + 1, ' of ').concat(this.slidesCount)
                ),
                n = [i].concat(l(e), [n]);
              return [t('div', { class: 'hooper-list', ref: 'list' }, n)];
            }.call(this, t);
          return t(
            'section',
            {
              class: { hooper: !0, 'is-vertical': this.config.vertical, 'is-rtl': this.config.rtl },
              attrs: { tabindex: '0' },
              on: {
                focusin: function() {
                  return (i.isFocus = !0);
                },
                focusout: function() {
                  return (i.isFocus = !1);
                },
                mouseover: function() {
                  return (i.isHover = !0);
                },
                mouseleave: function() {
                  return (i.isHover = !1);
                }
              }
            },
            e
          );
        }
      };
    var v = {
        name: 'HooperSlide',
        inject: ['$hooper'],
        props: { isClone: { type: Boolean, default: !1 }, index: { type: Number, required: !0 } },
        computed: {
          style: function() {
            var t = this.$hooper || {},
              i = t.config,
              e = t.slideHeight,
              t = t.slideWidth;
            return i.vertical ? 'height: '.concat(e, 'px') : 'width: '.concat(t, 'px');
          },
          isActive: function() {
            var t = this.$hooper.slideBounds,
              i = t.upper,
              t = t.lower;
            return this.index >= t && this.index <= i;
          },
          isPrev: function() {
            var t = this.$hooper.slideBounds.lower,
              i = this.$hooper.config.itemsToSlide;
            return this.index < t && this.index >= t - i;
          },
          isNext: function() {
            var t = this.$hooper.slideBounds.upper,
              i = this.$hooper.config.itemsToSlide;
            return this.index > t && this.index <= t + i;
          },
          isCurrent: function() {
            return this.index === this.$hooper.currentSlide;
          }
        },
        render: function(t) {
          var i = {
              'hooper-slide': !0,
              'is-clone': this.isClone,
              'is-active': this.isActive,
              'is-prev': this.isPrev,
              'is-next': this.isNext,
              'is-current': this.isCurrent
            },
            e = p(this);
          return t('li', { class: i, style: this.style, attrs: { 'aria-hidden': !this.isActive } }, e);
        }
      },
      m = {
        arrowUp: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',
        arrowDown: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',
        arrowRight: 'M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z',
        arrowLeft: 'M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z'
      },
      y = {
        name: 'HooperIcon',
        functional: !0,
        inheritAttrs: !0,
        props: {
          name: {
            type: String,
            required: !0,
            validator: function(t) {
              return t in m;
            }
          }
        },
        render: function(t, i) {
          var e = i.props,
            n = m[e.name],
            o = [];
          return (
            o.push(t('title', (i = (i = e.name).replace(/([A-Z]+)/g, ' $1')).charAt(0).toUpperCase() + i.slice(1))),
            o.push(t('path', { attrs: { d: 'M0 0h24v24H0z', fill: 'none' } })),
            o.push(t('path', { attrs: { d: n } })),
            t(
              'svg',
              { attrs: { class: 'icon icon-'.concat(e.name), viewBox: '0 0 24 24', width: '24px', height: '24px' } },
              o
            )
          );
        }
      },
      S = {
        inject: ['$hooper'],
        name: 'HooperProgress',
        computed: {
          currentSlide: function() {
            return u(this.$hooper.currentSlide, this.$hooper.slidesCount);
          },
          progress: function() {
            var t = this.$hooper.slidesCount - this.$hooper.trimStart - this.$hooper.trimEnd;
            return (100 * (this.currentSlide - this.$hooper.trimStart)) / t;
          }
        },
        render: function(t) {
          return t('div', { class: 'hooper-progress' }, [
            t('div', { class: 'hooper-progress-inner', style: 'width: '.concat(this.progress, '%') })
          ]);
        }
      };
    function b(i, e, t, n) {
      for (var o = [], r = 0; r < t; r++)
        !(function(t) {
          o.push(
            i('li', [
              i(
                'button',
                {
                  class: { 'hooper-indicator': !0, 'is-active': t === e },
                  on: {
                    click: function() {
                      return n(t);
                    }
                  },
                  attrs: { type: 'button' }
                },
                [i('span', { class: 'hooper-sr-only' }, 'item '.concat(t))]
              )
            ])
          );
        })(r);
      return [i('ol', { class: 'hooper-indicators' }, o)];
    }
    var w = {
      inject: ['$hooper'],
      name: 'HooperPagination',
      props: { mode: { default: 'indicator', type: String } },
      computed: {
        currentSlide: function() {
          return u(this.$hooper.currentSlide, this.$hooper.slidesCount);
        },
        slides: function() {
          return this.$hooper.slides
            .map(function(t, i) {
              return i;
            })
            .slice(this.$hooper.trimStart, this.$hooper.slidesCount - this.$hooper.trimEnd + 1);
        }
      },
      render: function(t) {
        var i,
          e,
          n,
          o = this,
          r = this.$hooper.slidesCount,
          n =
            'indicator' === this.mode
              ? b(t, this.currentSlide, r, function(t) {
                  return o.$hooper.slideTo(t);
                })
              : ((i = t), (e = this.currentSlide), (n = r), [i('span', e + 1), i('span', '/'), i('span', n)]);
        return t('div', { class: { 'hooper-pagination': !0, 'is-vertical': this.$hooper.config.vertical } }, n);
      }
    };
    function $(t, i, e, n, o, r) {
      var s,
        a = o.isVertical,
        o = o.isRTL,
        s =
          e && e.length
            ? e
            : [
                t(y, {
                  props: {
                    name:
                      ((a = a),
                      (s = o),
                      n
                        ? a
                          ? 'arrowUp'
                          : s
                          ? 'arrowRight'
                          : 'arrowLeft'
                        : a
                        ? 'arrowDown'
                        : s
                        ? 'arrowLeft'
                        : 'arrowRight')
                  }
                })
              ];
      return t(
        'button',
        {
          class: (c((t = {}), 'hooper-'.concat(n ? 'prev' : 'next'), !0), c(t, 'is-disabled', i), t),
          attrs: { type: 'button' },
          on: { click: r }
        },
        s
      );
    }
    i = {
      inject: ['$hooper'],
      name: 'HooperNavigation',
      computed: {
        isPrevDisabled: function() {
          return !this.$hooper.config.infiniteScroll && 0 === this.$hooper.currentSlide;
        },
        isNextDisabled: function() {
          return (
            !this.$hooper.config.infiniteScroll &&
            (this.$hooper.config.trimWhiteSpace
              ? this.$hooper.currentSlide ===
                this.$hooper.slidesCount - Math.min(this.$hooper.config.itemsToShow, this.$hooper.slidesCount)
              : this.$hooper.currentSlide === this.$hooper.slidesCount - 1)
          );
        }
      },
      methods: {
        slideNext: function() {
          this.$hooper.slideNext(), this.$hooper.restartTimer();
        },
        slidePrev: function() {
          this.$hooper.slidePrev(), this.$hooper.restartTimer();
        }
      },
      render: function(t) {
        var i = this,
          e = { isRTL: this.$hooper.config.rtl, isVertical: this.$hooper.config.vertical },
          e = [
            $(t, this.isPrevDisabled, this.$slots['hooper-prev'], !0, e, function() {
              return i.slidePrev();
            }),
            $(t, this.isNextDisabled, this.$slots['hooper-next'], !1, e, function() {
              return i.slideNext();
            })
          ];
        return t(
          'div',
          {
            class: {
              'hooper-navigation': !0,
              'is-vertical': this.$hooper.config.vertical,
              'is-rtl': this.$hooper.config.rtl
            }
          },
          e
        );
      }
    };
    (t.Hooper = g),
      (t.Icon = y),
      (t.Navigation = i),
      (t.Pagination = w),
      (t.Progress = S),
      (t.Slide = v),
      (t.addonMixin = { inject: ['$hooper'] }),
      (t.default = g),
      Object.defineProperty(t, '__esModule', { value: !0 });
  }),
  'object' == typeof exports && 'undefined' != typeof module
    ? i(exports, require('vue'))
    : 'function' == typeof define && define.amd
    ? define(['exports', 'vue'], i)
    : i(((t = t || self).Hooper = {}), t.Vue);
